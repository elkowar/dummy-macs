* Basics
** Fix defaults
Lexical binding may improve performance,... but probably not really.
Let's still do it.

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

Let's also fix the indentation.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq tabs-width 4)

#+end_src

Let's disable x clipboard stuff, as it breaks closing emacs.
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard-manager nil)
#+end_src

We set these variables as they may be used for stuff, idk
#+BEGIN_SRC emacs-lisp
(setq user-full-name "ElKowar"
      user-mail-address "lkowarschick@gmail.com")
(setq org-directory "~/org/")
#+end_src

Fix some basic keybindings
#+BEGIN_SRC emacs-lisp
(map! :g
      "<escape>" #'keyboard-quit
      "C-n" nil
      "C-p" nil)
(setq doom-localleader-key "SPC x")
#+end_src

apparently this improves performance...
#+BEGIN_SRC emacs-lisp
(setq inhibit-compacting-font-caches t)
#+end_src

** Forge

#+BEGIN_SRC emacs-lisp
(setq auth-sources '("~/.authinfo"))
#+END_SRC
** Vimish-fold
#+BEGIN_SRC emacs-lisp
(after! vimish-fold
  (vimish-fold-global-mode 1))
#+END_SRC

* TODO UI Fancyfication
** Basics
Let's set a colorscheme and disable line-numbers
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-betterbox)
(setq display-line-numbers-type nil)
#+END_SRC

and set the font.
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "xos4 Terminus" :size 15)
      doom-variable-pitch-font (font-spec :family "sans" :size 13)
      doom-big-font (font-spec :family "Source code pro"))
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
#+end_src

Let's fix the optics of the Doom Dashboard.
#+BEGIN_SRC emacs-lisp
(custom-set-faces!
  '(doom-dashboard-banner :foreground "#8ec07c" :background "#282828" :weight bold)
  '(doom-dashboard-footer :inherit font-lock-constant-face)
  '(doom-dashboard-footer-icon :inherit all-the-icons-red)
  '(doom-dashboard-loaded :inherit font-lock-warning-face)
  '(doom-dashboard-menu-desc :inherit font-lock-string-face)
  '(doom-dashboard-menu-title :inherit font-lock-function-name-face))
#+END_SRC


#+BEGIN_SRC emacs-lisp
(custom-set-faces!
  '(markdown-code-face :inherit :background :background nil))

(add-hook! '+popup-buffer-mode-hook
  (set-window-margins (selected-window) 2 2))

(after! centaur-tabs
    (setq centaur-tabs-style "box"))
#+END_SRC

Hide code block start indicators
#+BEGIN_SRC emacs-lisp
(setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "†")
                                       ("#+END_SRC" . "†")
                                       ("#+begin_src" . "†")
                                       ("#+end_src" . "†")))
#+END_SRC


Rainbows are fabulous!
#+begin_src emacs-lisp
(after! rainbow-delimiters-mode (rainbow-delimiters-mode 1))
#+end_src

** company should not be ugly, plox

#+BEGIN_SRC emacs-lisp
(after! company
  (custom-set-faces!
    '(company-tooltip :background "#1d2021")))
#+END_SRC

** Make mode line less shit
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (custom-set-faces!
    '(mode-line :background "#1d2021")))
;;    '(doom-modeline-buffer-path :font 'unspecified)
;;    '(doom-modeline-project-dir :font 'unspecified)))

(setq window-divider-default-bottom-width 0)

#+END_SRC

* Org-mode
** General

#+BEGIN_SRC emacs-lisp
(after! org
  (custom-set-faces!
    '(outline-1 :weight normal)
    '(outline-2 :weight normal)
    '(outline-3 :weight normal)
    '(outline-4 :weight normal)
    '(outline-5 :weight normal)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(after! (org org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("◆" "◆" "◆" "◆" "◆" "◆" "◆" "◆" "◆")))

#+END_SRC

** codeblocks
Let's make org-mode codeblocks look good!

For this, we first set the code-block background and make it extend to the full width.
Additionally, we make the top and bottom lines of the block smaller and darker.
#+begin_src emacs-lisp
(after! org
  (set-face-attribute 'org-block nil
                      :background "#1d2021"
                      :extend t)
  (cl-loop for face in '(org-block-begin-line org-block-end-line) do
           (set-face-attribute face nil
                               :foreground "#504945"
                               :background  "#1a1d1e"
                               :height 0.8
                               :extend t)))

#+end_src

* General Keybindings
** Basics
#+BEGIN_SRC emacs-lisp
(map! :leader
 "1" #'delete-other-windows
 "0" #'delete-window
 "p" '(:keymap projectile-command-map)
 "g" #'magit-status)

(map! :leader
      (:prefix ("y" . "Emacs")
        :desc "open config"   "c" '(lambda () (interactive) (find-file "~/.doom.d/config.org"))
        :desc "reload config" "r" #'+literate/reload))
#+END_SRC
** Window management
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Last buffer"  "w" 'evil-switch-to-windows-last-buffer
      :desc "previous tab" "h" 'centaur-tabs-backward
      :desc "next tab"     "l" 'centaur-tabs-forward

      (:prefix ("c" . "Window management")
       :desc "kill buffer"                   "x" #'kill-current-buffer
       :desc "close window"                  "w" #'delete-window
       :desc "Switch to file"                "f" #'counsel-buffer-or-recentf
       :desc "Switch buffer"                 "c" #'switch-to-buffer
       :desc "Switch buffer in other window" "o" #'counsel-switch-buffer-other-window
       :desc "close window buffer"           "d" #'kill-buffer-and-window
       :desc "next group"                    "l" #'centaur-tabs-forward-group
       :desc "previous group"                "h" #'centaur-tabs-backward-group
       :desc "show groups"                   "j" #'centaur-tabs-toggle-groups
       :desc "h-split"                       "s" #'split-window-below
       :desc "v-split"                       "v" #'split-window-right)

      (:prefix ("u" . "Workspaces")
       :desc "Display tab bar"           "TAB" #'+workspace/display
       :desc "Switch workspace"          "u"   #'+workspace/switch-to
       :desc "Switch to last workspace"  "w"   #'+workspace/other
       :desc "New workspace"             "n"   #'+workspace/new
       :desc "Load workspace from file"  "l"   #'+workspace/load
       :desc "Save workspace to file"    "s"   #'+workspace/save
       :desc "Delete session"            "x"   #'+workspace/kill-session
       :desc "Delete this workspace"     "d"   #'+workspace/delete
       :desc "Rename workspace"          "r"   #'+workspace/rename
       :desc "Restore last session"      "R"   #'+workspace/restore-last-session
       :desc "Next workspace"            "l"   #'+workspace/switch-right
       :desc "Previous workspace"        "h"   #'+workspace/switch-left
       :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
       :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
       :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
       :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
       :desc "Switch to 5th workspace"   "5"   #'+workspace/switch-to-4
       :desc "Switch to 6th workspace"   "6"   #'+workspace/switch-to-5
       :desc "Switch to 7th workspace"   "7"   #'+workspace/switch-to-6
       :desc "Switch to 8th workspace"   "8"   #'+workspace/switch-to-7
       :desc "Switch to 9th workspace"   "9"   #'+workspace/switch-to-8
       :desc "Switch to final workspace" "0"   #'+workspace/switch-to-final))
#+END_SRC
** File management shit
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("f" . "file")
       :desc "Find directory"              "d"   #'+default/dired
       :desc "Find file in emacs.d"        "e"   #'+default/find-in-emacsd
       :desc "Browse emacs.d"              "E"   #'+default/browse-emacsd
       :desc "Find file"                   "f"   #'find-file
       :desc "Find file from here"         "F"   #'+default/find-file-under-here
       :desc "Locate file"                 "l"   #'locate
       :desc "Browse private config"       "p"   #'doom/open-private-config
       :desc "Recent files"                "r"   #'recentf-open-files
       :desc "Sudo this file"              "u"   #'doom/sudo-this-file))
#+end_src

** Open shit

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix-map ("o" . "open")
       :desc "Org agenda"       "A"  #'org-agenda
       (:prefix ("a" . "org agenda")
        :desc "Agenda"         "a"  #'org-agenda
        :desc "Todo list"      "t"  #'org-todo-list
        :desc "Tags search"    "m"  #'org-tags-view
        :desc "View search"    "v"  #'org-search-view)
       :desc "Default browser"    "b"  #'browse-url-of-file
       :desc "Start debugger"     "d"  #'+debugger/start
       :desc "New frame"          "f"  #'make-frame
       :desc "REPL"               "r"  #'+eval/open-repl-other-window
       :desc "REPL (same window)" "R"  #'+eval/open-repl-same-window
       :desc "Dired"              "-"  #'dired-jump
       (:when (featurep! :ui neotree)
        :desc "Project sidebar"              "p" #'+neotree/open
        :desc "Find file in project sidebar" "P" #'+neotree/find-this-file)
       (:when (featurep! :ui treemacs)
        :desc "Project sidebar" "p" #'+treemacs/toggle
        :desc "Find file in project sidebar" "P" #'treemacs-find-file)
       (:when (featurep! :term shell)
        :desc "Toggle shell popup"    "t" #'+shell/toggle
        :desc "Open shell here"       "T" #'+shell/here)
       (:when (featurep! :term term)
        :desc "Toggle terminal popup" "t" #'+term/toggle
        :desc "Open terminal here"    "T" #'+term/here)
       (:when (featurep! :term vterm)
        :desc "Toggle vterm popup"    "t" #'+vterm/toggle
        :desc "Open vterm here"       "T" #'+vterm/here)
       (:when (featurep! :term eshell)
        :desc "Toggle eshell popup"   "e" #'+eshell/toggle
        :desc "Open eshell here"      "E" #'+eshell/here)))
#+END_SRC

** Project shit

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix-map ("p" . "project")
       :desc "Browse project"               "." #'+default/browse-project
       :desc "Run cmd in project root"      "!" #'projectile-run-shell-command-in-root
       :desc "Add new project"              "a" #'projectile-add-known-project
       :desc "Switch to project buffer"     "b" #'projectile-switch-to-buffer
       :desc "Compile in project"           "c" #'projectile-compile-project
       :desc "Repeat last command"          "C" #'projectile-repeat-last-command
       :desc "Remove known project"         "d" #'projectile-remove-known-project
       :desc "Discover projects in folder"  "D" #'+default/discover-projects
       :desc "Edit project .dir-locals"     "e" #'projectile-edit-dir-locals
       :desc "Find file in project"         "f" #'projectile-find-file
       :desc "Find file in other project"   "F" #'doom/find-file-in-other-project
       :desc "Configure project"            "g" #'projectile-configure-project
       :desc "Invalidate project cache"     "i" #'projectile-invalidate-cache
       :desc "Kill project buffers"         "k" #'projectile-kill-buffers
       :desc "Find other file"              "o" #'projectile-find-other-file
       :desc "Switch project"               "p" #'projectile-switch-project
       :desc "Find recent project files"    "r" #'projectile-recentf
       :desc "Run project"                  "R" #'projectile-run-project
       :desc "Save project files"           "s" #'projectile-save-project-buffers
       :desc "List project todos"           "t" #'magit-todos-list
       :desc "Test project"                 "T" #'projectile-test-project
       :desc "Pop up scratch buffer"        "x" #'doom/open-project-scratch-buffer))
#+END_SRC

** Toggle stuff
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "Big mode"                     "b" #'doom-big-font-mode
       (:when (featurep! :checkers syntax)
        :desc "Flycheck"                   "f" #'flycheck-mode)
       :desc "Frame fullscreen"             "F" #'toggle-frame-fullscreen
       :desc "Evil goggles"                 "g" #'evil-goggles-mode
       (:when (featurep! :ui indent-guides)
        :desc "Indent guides"              "i" #'highlight-indent-guides-mode)
       :desc "Indent style"                 "I" #'doom/toggle-indent-style
       :desc "Line numbers"                 "l" #'doom/toggle-line-numbers
       (:when (featurep! :checkers spell +flyspell)
        :desc "Spell checker"              "s" #'flyspell-mode)
       (:when (featurep! :ui zen)
        :desc "Zen mode"                   "z" #'writeroom-mode)))
#+END_SRC

** Insert shit
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix-map ("i" . "insert")
       :desc "Emoji"                 "e" #'emojify-insert-emoji
       :desc "Current file name"     "f" #'+default/insert-file-path
       :desc "Current file path"     "F" (cmd!! #'+default/insert-file-path t)
       :desc "From evil register"    "r" #'evil-ex-registers
       :desc "Snippet"               "s" #'yas-insert-snippet
       :desc "Unicode"               "u" #'unicode-chars-list-chars
       :desc "From clipboard"        "y" #'+default/yank-pop))
#+END_SRC
* lsp stuff

#+BEGIN_SRC emacs-lisp
(after! rustic
  (setq rustic-lsp-server 'rust-analyzer)
  (add-hook 'flycheck-mode-hook  #'flycheck-rust-setup))

;;(after! flycheck
;;  (add-hook 'flycheck-mode-hook #'flycheck-inline-mode))
;;  (setq flycheck-inline-display-function
;;      (lambda (msg pos)
;;        (let* ((ov (quick-peek-overlay-ensure-at pos))
;;               (contents (quick-peek-overlay-contents ov)))
;;          (setf (quick-peek-overlay-contents ov)
;;                (concat contents (when contents "\n") msg))
;;          (quick-peek-update ov)))
;;      flycheck-inline-clear-function #'quick-peek-hide))

(after! company
        (map! :i "C-SPC" #'company-complete)
        (map! :map company-active-map
              "C-n" #'company-select-next
              "C-p" #'company-select-previous)
        (map! :map company-search-map
              "C-n" #'company-select-next
              "C-p" #'company-select-previous))




(after! lsp-ui
  (setq lsp-ui-doc-enable 1)
  (setq lsp-ui-doc-position 'at-point)
  (setq lsp-ui-doc-show-with-cursor nil)
  (setq lsp-ui-doc-max-width 200)
  (setq lsp-ui-doc-max-height 50)
  (setq lsp-ui-doc-use-webkit nil)
  (setq lsp-ui-doc-border 'unspecified)
  (setq lsp-ui-peek-enable 1))


(flycheck-popup-tip-mode 1)


;; NOTE: lsp-workspace-folders-remove
(after! lsp-haskell
  (setq lsp-haskell-server-path "haskell-language-server-wrapper"))

(custom-set-faces!
  '(font-lock-doc-face :foreground "#928374"))

#+END_SRC

** Basics
#+BEGIN_SRC emacs-lisp
(after! lsp-mode
  (setq lsp-enable-semantic-highlighting t)
  (setq lsp-enable-indentation t)
  (setq lsp-enable-folding nil)
  (setq lsp-enable-relative-indentation t)
  (setq lsp-auto-execute-action t))
#+END_SRC


** lsp binds
#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix-map ("m" . "Code")
       :desc "LSP"                        "l" #'+default/lsp-command-map
       :desc "Rename symbol"              "n" #'lsp-rename
       :desc "Go to definition"           "g" #'+lookup/definition
       :desc "Go to type-definition"      "t" #'+lookup/type-definition
       ;; :desc "Find references"            "r" #'+lookup/references
       :desc "Find references"            "r" #'lsp-ui-peek-find-references
       :desc "Go to implementation"       "i" #'+lookup/implementations
       :desc "Format"                     "f" #'lsp-format-buffer
       :desc "Format region"              "F" #'lsp-format-region
       :desc "Find symbols"               "s" #'lsp-ivy-global-workspace-symbol
       :desc "List errors"                "e" #'flycheck-list-errors
       :desc "Show diagnostics buffer"    "w" #'lsp-diagnostics--flycheck-buffer
       :desc "Compile"                    "c" #'compile
       :desc "Compile"                    "C" #'recompile
       :desc "Open imenu"                 "k" #'lsp-ui-imenu
       :desc "Execute code action"        "v" #'lsp-execute-code-action
       :desc "Show documentation"         "d" #'lsp-ui-doc-show ;; #'lsp-ui-doc-glance
       :desc "Focus documentation"        "D" #'lsp-ui-doc-focus-frame))
#+END_SRC

** Make error stuff focus itself once opened
#+BEGIN_SRC emacs-lisp
(after! flycheck
  (set-popup-rule! "^\\*Flycheck errors\\*" :select t))
#+END_SRC
** TODO and close itself once a value  been selected
check =flycheck-error-list-mode-map= and add to the function that is being called on RET.




* Hide centaur tabs on popups
#+BEGIN_SRC emacs-lisp
;; (add-hook! 'anzu-mode-hook #'centaur-tabs-local-mode)
#+END_SRC

* TODO-List
** Fix counsel shit
#+BEGIN_SRC emacs-lisp
;; (counsel-find-file-map)
#+END_SRC

